{
  "name": "multi-step-form",
  "type": "registry:ui",
  "dependencies": [
    "framer-motion",
    "lucide-react",
    "react",
    "react-hook-form",
    "zod"
  ],
  "registryDependencies": [
    "https://blocks.mvp-subha.me/r/utils.json",
    "https://blocks.mvp-subha.me/r/button.json",
    "https://blocks.mvp-subha.me/r/input.json",
    "https://blocks.mvp-subha.me/r/label.json",
    "https://blocks.mvp-subha.me/r/progress.json"
  ],
  "files": [
    {
      "type": "registry:ui",
      "content": "\"use client\";\r\n\r\nimport React, { useState } from \"react\";\r\nimport { motion, AnimatePresence } from \"framer-motion\";\r\nimport { z } from \"zod\";\r\nimport { useForm } from \"react-hook-form\";\r\nimport { zodResolver } from \"@hookform/resolvers/zod\";\r\nimport { cn } from \"@/lib/utils\";\r\nimport { Button } from \"@/components/ui/button\";\r\nimport { Input } from \"@/components/ui/input\";\r\nimport { Label } from \"@/components/ui/label\";\r\nimport { Progress } from \"@/components/ui/progress\";\r\nimport { CheckCircle2, ArrowRight, ArrowLeft } from \"lucide-react\";\r\n\r\n// Define the form schema for each step\r\nconst personalInfoSchema = z.object({\r\n  firstName: z.string().min(2, \"First name must be at least 2 characters\"),\r\n  lastName: z.string().min(2, \"Last name must be at least 2 characters\"),\r\n  email: z.string().email(\"Please enter a valid email address\"),\r\n});\r\n\r\nconst addressSchema = z.object({\r\n  address: z.string().min(5, \"Address must be at least 5 characters\"),\r\n  city: z.string().min(2, \"City must be at least 2 characters\"),\r\n  zipCode: z.string().min(5, \"Zip code must be at least 5 characters\"),\r\n});\r\n\r\nconst accountSchema = z.object({\r\n  username: z.string().min(3, \"Username must be at least 3 characters\"),\r\n  password: z\r\n    .string()\r\n    .min(8, \"Password must be at least 8 characters\")\r\n    .regex(/[A-Z]/, \"Password must contain at least one uppercase letter\")\r\n    .regex(/[0-9]/, \"Password must contain at least one number\"),\r\n  confirmPassword: z.string(),\r\n}).refine(data => data.password === data.confirmPassword, {\r\n  message: \"Passwords do not match\",\r\n  path: [\"confirmPassword\"],\r\n});\r\n\r\n// Combine all schemas for the final form data\r\nconst formSchema = z.object({\r\n  ...personalInfoSchema.shape,\r\n  ...addressSchema.shape,\r\n  ...accountSchema._def.schema.shape,\r\n});\r\n\r\ntype FormData = z.infer<typeof formSchema>;\r\n\r\ninterface MultiStepFormProps {\r\n  className?: string;\r\n  onSubmit?: (data: FormData) => void;\r\n}\r\n\r\nexport default function MultiStepForm({ className, onSubmit }: MultiStepFormProps) {\r\n  const [step, setStep] = useState(0);\r\n  const [formData, setFormData] = useState<Partial<FormData>>({});\r\n  const [isSubmitting, setIsSubmitting] = useState(false);\r\n  const [isComplete, setIsComplete] = useState(false);\r\n\r\n  // Define the steps\r\n  const steps = [\r\n    {\r\n      id: \"personal\",\r\n      title: \"Personal Information\",\r\n      description: \"Tell us about yourself\",\r\n      schema: personalInfoSchema,\r\n      fields: [\r\n        { name: \"firstName\", label: \"First Name\", type: \"text\", placeholder: \"John\" },\r\n        { name: \"lastName\", label: \"Last Name\", type: \"text\", placeholder: \"Doe\" },\r\n        { name: \"email\", label: \"Email\", type: \"email\", placeholder: \"john.doe@example.com\" },\r\n      ],\r\n    },\r\n    {\r\n      id: \"address\",\r\n      title: \"Address Information\",\r\n      description: \"Where do you live?\",\r\n      schema: addressSchema,\r\n      fields: [\r\n        { name: \"address\", label: \"Address\", type: \"text\", placeholder: \"123 Main St\" },\r\n        { name: \"city\", label: \"City\", type: \"text\", placeholder: \"New York\" },\r\n        { name: \"zipCode\", label: \"Zip Code\", type: \"text\", placeholder: \"10001\" },\r\n      ],\r\n    },\r\n    {\r\n      id: \"account\",\r\n      title: \"Account Setup\",\r\n      description: \"Create your account\",\r\n      schema: accountSchema,\r\n      fields: [\r\n        { name: \"username\", label: \"Username\", type: \"text\", placeholder: \"johndoe\" },\r\n        { name: \"password\", label: \"Password\", type: \"password\", placeholder: \"••••••••\" },\r\n        { name: \"confirmPassword\", label: \"Confirm Password\", type: \"password\", placeholder: \"••••••••\" },\r\n      ],\r\n    },\r\n  ];\r\n\r\n  // Get the current step schema\r\n  const currentStepSchema = steps[step].schema;\r\n\r\n  // Setup form with the current step schema\r\n  const {\r\n    register,\r\n    handleSubmit,\r\n    formState: { errors },\r\n    reset,\r\n  } = useForm<any>({\r\n    resolver: zodResolver(currentStepSchema as z.ZodType<any>),\r\n    defaultValues: formData,\r\n  });\r\n\r\n  // Calculate progress percentage\r\n  const progress = ((step + 1) / steps.length) * 100;\r\n\r\n  // Handle next step\r\n  const handleNextStep = (data: any) => {\r\n    const updatedData = { ...formData, ...data };\r\n    setFormData(updatedData);\r\n\r\n    if (step < steps.length - 1) {\r\n      setStep(step + 1);\r\n      // Reset form with the updated data for the next step\r\n      reset(updatedData);\r\n    } else {\r\n      // Final step submission\r\n      setIsSubmitting(true);\r\n      setTimeout(() => {\r\n        if (onSubmit) {\r\n          onSubmit(updatedData as FormData);\r\n        }\r\n        setIsComplete(true);\r\n        setIsSubmitting(false);\r\n      }, 1500);\r\n    }\r\n  };\r\n\r\n  // Handle previous step\r\n  const handlePrevStep = () => {\r\n    if (step > 0) {\r\n      setStep(step - 1);\r\n    }\r\n  };\r\n\r\n  // Animation variants\r\n  const variants = {\r\n    hidden: { opacity: 0, x: 50 },\r\n    visible: { opacity: 1, x: 0 },\r\n    exit: { opacity: 0, x: -50 },\r\n  };\r\n\r\n  return (\r\n    <div className={cn(\"w-full max-w-md mx-auto p-6 rounded-lg shadow-lg bg-card/40\", className)}>\r\n      {!isComplete ? (\r\n        <>\r\n          {/* Progress bar */}\r\n          <div className=\"mb-8\">\r\n            <div className=\"flex justify-between mb-2\">\r\n              <span className=\"text-sm font-medium\">Step {step + 1} of {steps.length}</span>\r\n              <span className=\"text-sm font-medium\">{Math.round(progress)}%</span>\r\n            </div>\r\n            <Progress value={progress} className=\"h-2\" />\r\n          </div>\r\n\r\n          {/* Step indicators */}\r\n          <div className=\"flex justify-between mb-8\">\r\n            {steps.map((s, i) => (\r\n              <div key={s.id} className=\"flex flex-col items-center\">\r\n                <div\r\n                  className={cn(\r\n                    \"w-8 h-8 rounded-full flex items-center justify-center text-xs font-bold\",\r\n                    i < step\r\n                      ? \"bg-primary text-primary-foreground\"\r\n                      : i === step\r\n                      ? \"bg-primary text-primary-foreground ring-2 ring-primary/30\"\r\n                      : \"bg-secondary text-secondary-foreground\"\r\n                  )}\r\n                >\r\n                  {i < step ? <CheckCircle2 className=\"h-4 w-4\" /> : i + 1}\r\n                </div>\r\n                <span className=\"text-xs mt-1 hidden sm:block\">{s.title}</span>\r\n              </div>\r\n            ))}\r\n          </div>\r\n\r\n          {/* Form */}\r\n          <AnimatePresence mode=\"wait\">\r\n            <motion.div\r\n              key={step}\r\n              initial=\"hidden\"\r\n              animate=\"visible\"\r\n              exit=\"exit\"\r\n              variants={variants}\r\n              transition={{ duration: 0.3 }}\r\n            >\r\n              <div className=\"mb-6\">\r\n                <h2 className=\"text-xl font-bold\">{steps[step].title}</h2>\r\n                <p className=\"text-sm text-muted-foreground\">{steps[step].description}</p>\r\n              </div>\r\n\r\n              <form onSubmit={handleSubmit(handleNextStep)} className=\"space-y-4\">\r\n                {steps[step].fields.map((field) => (\r\n                  <div key={field.name} className=\"space-y-2\">\r\n                    <Label htmlFor={field.name}>{field.label}</Label>\r\n                    <Input\r\n                      id={field.name}\r\n                      type={field.type}\r\n                      placeholder={field.placeholder}\r\n                      {...register(field.name as any)}\r\n                      className={cn(errors[field.name as string] && \"border-destructive\")}\r\n                    />\r\n                    {errors[field.name as string] && (\r\n                      <p className=\"text-sm text-destructive\">\r\n                        {errors[field.name as string]?.message as string}\r\n                      </p>\r\n                    )}\r\n                  </div>\r\n                ))}\r\n\r\n                <div className=\"flex justify-between pt-4\">\r\n                  <Button\r\n                    type=\"button\"\r\n                    variant=\"outline\"\r\n                    onClick={handlePrevStep}\r\n                    disabled={step === 0}\r\n                    className={cn(step === 0 && \"invisible\")}\r\n                  >\r\n                    <ArrowLeft className=\"mr-2 h-4 w-4\" /> Back\r\n                  </Button>\r\n                  <Button type=\"submit\" disabled={isSubmitting}>\r\n                    {step === steps.length - 1 ? (\r\n                      isSubmitting ? \"Submitting...\" : \"Submit\"\r\n                    ) : (\r\n                      <>\r\n                        Next <ArrowRight className=\"ml-2 h-4 w-4\" />\r\n                      </>\r\n                    )}\r\n                  </Button>\r\n                </div>\r\n              </form>\r\n            </motion.div>\r\n          </AnimatePresence>\r\n        </>\r\n      ) : (\r\n        <motion.div\r\n          initial={{ opacity: 0, scale: 0.9 }}\r\n          animate={{ opacity: 1, scale: 1 }}\r\n          transition={{ duration: 0.5 }}\r\n          className=\"text-center py-10\"\r\n        >\r\n          <div className=\"inline-flex h-16 w-16 items-center justify-center rounded-full bg-primary/10 mb-4\">\r\n            <CheckCircle2 className=\"h-8 w-8 text-primary\" />\r\n          </div>\r\n          <h2 className=\"text-2xl font-bold mb-2\">Form Submitted!</h2>\r\n          <p className=\"text-muted-foreground mb-6\">\r\n            Thank you for completing the form. We&apos;ll be in touch soon.\r\n          </p>\r\n          <Button onClick={() => {\r\n            setStep(0);\r\n            setFormData({});\r\n            setIsComplete(false);\r\n            reset({});\r\n          }}>\r\n            Start Over\r\n          </Button>\r\n        </motion.div>\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n",
      "path": "/components/ui/multi-step-form.tsx",
      "target": "/components/ui/multi-step-form.tsx"
    }
  ]
}