{
  "name": "basic-pagination",
  "type": "registry:block",
  "dependencies": [
    "framer-motion",
    "lucide-react",
    "react"
  ],
  "registryDependencies": [
    "https://blocks.mvp-subha.me/r/utils.json",
    "https://blocks.mvp-subha.me/r/pagination.json",
    "https://blocks.mvp-subha.me/r/button.json"
  ],
  "files": [
    {
      "type": "registry:block",
      "content": "\"use client\";\r\n\r\nimport React, { useState } from \"react\";\r\nimport { motion } from \"framer-motion\";\r\nimport { ChevronLeft, ChevronRight, MoreHorizontal } from \"lucide-react\";\r\nimport { cn } from \"@/lib/utils\";\r\nimport {\r\n  Pagination,\r\n  PaginationContent,\r\n  PaginationEllipsis,\r\n  PaginationItem,\r\n  PaginationLink,\r\n  PaginationNext,\r\n  PaginationPrevious,\r\n} from \"@/components/ui/pagination\";\r\n\r\ninterface BasicPaginationProps {\r\n  totalPages: number;\r\n  initialPage?: number;\r\n  siblingsCount?: number;\r\n  onPageChange?: (page: number) => void;\r\n  className?: string;\r\n  variant?: \"default\" | \"outline\" | \"rounded\";\r\n  showDemo?: boolean;\r\n}\r\n\r\nexport default function BasicPagination({\r\n  totalPages = 10,\r\n  initialPage = 1,\r\n  siblingsCount = 1,\r\n  onPageChange,\r\n  className,\r\n  variant = \"default\",\r\n  showDemo = false,\r\n}: BasicPaginationProps) {\r\n  const [currentPage, setCurrentPage] = useState(initialPage);\r\n\r\n  // Generate page numbers array\r\n  const generatePagination = () => {\r\n    // Always show first and last page\r\n    const firstPage = 1;\r\n    const lastPage = totalPages;\r\n\r\n    // Calculate range of pages to show around current page\r\n    const leftSiblingIndex = Math.max(currentPage - siblingsCount, firstPage);\r\n    const rightSiblingIndex = Math.min(currentPage + siblingsCount, lastPage);\r\n\r\n    // Determine whether to show ellipses\r\n    const shouldShowLeftDots = leftSiblingIndex > firstPage + 1;\r\n    const shouldShowRightDots = rightSiblingIndex < lastPage - 1;\r\n\r\n    // Initialize the array of page numbers\r\n    const pageNumbers: (number | string)[] = [];\r\n\r\n    // Always add first page\r\n    pageNumbers.push(firstPage);\r\n\r\n    // Add left ellipsis if needed\r\n    if (shouldShowLeftDots) {\r\n      pageNumbers.push(\"leftEllipsis\");\r\n    }\r\n\r\n    // Add page numbers between ellipses\r\n    for (let i = leftSiblingIndex; i <= rightSiblingIndex; i++) {\r\n      if (i !== firstPage && i !== lastPage) {\r\n        pageNumbers.push(i);\r\n      }\r\n    }\r\n\r\n    // Add right ellipsis if needed\r\n    if (shouldShowRightDots) {\r\n      pageNumbers.push(\"rightEllipsis\");\r\n    }\r\n\r\n    // Always add last page if it's not the same as first page\r\n    if (lastPage !== firstPage) {\r\n      pageNumbers.push(lastPage);\r\n    }\r\n\r\n    return pageNumbers;\r\n  };\r\n\r\n  const handlePageChange = (page: number) => {\r\n    if (page === currentPage) return;\r\n\r\n    setCurrentPage(page);\r\n    onPageChange?.(page);\r\n  };\r\n\r\n  const pageNumbers = generatePagination();\r\n\r\n  // Variants for motion animations\r\n  const itemVariants = {\r\n    initial: { opacity: 0, y: 5 },\r\n    animate: { opacity: 1, y: 0 },\r\n    exit: { opacity: 0, y: -5 },\r\n    hover: { scale: 1.05, transition: { duration: 0.2 } },\r\n  };\r\n\r\n  // Get button style based on variant\r\n  const getButtonStyle = (isActive: boolean) => {\r\n    if (variant === \"outline\") {\r\n      return isActive\r\n        ? \"border-primary text-primary hover:bg-primary/10\"\r\n        : \"border-border hover:border-primary/50 hover:text-primary\";\r\n    }\r\n\r\n    if (variant === \"rounded\") {\r\n      return isActive\r\n        ? \"bg-primary text-primary-foreground rounded-full\"\r\n        : \"hover:bg-muted rounded-full\";\r\n    }\r\n\r\n    // Default variant\r\n    return isActive ? \"bg-primary text-primary-foreground\" : \"hover:bg-muted\";\r\n  };\r\n\r\n  const PaginationComponent = (\r\n    <Pagination className={cn(\"py-4\", className)}>\r\n      <PaginationContent>\r\n        <PaginationItem>\r\n          <motion.div\r\n            initial=\"initial\"\r\n            animate=\"animate\"\r\n            exit=\"exit\"\r\n            whileHover=\"hover\"\r\n            variants={itemVariants}\r\n            transition={{ duration: 0.3 }}\r\n          >\r\n            <PaginationPrevious\r\n              href=\"#\"\r\n              onClick={(e) => {\r\n                e.preventDefault();\r\n                if (currentPage > 1) {\r\n                  handlePageChange(currentPage - 1);\r\n                }\r\n              }}\r\n              className={cn(\r\n                currentPage <= 1 ? \"pointer-events-none opacity-50\" : \"\",\r\n                variant === \"rounded\" ? \"rounded-full\" : \"\",\r\n              )}\r\n            />\r\n          </motion.div>\r\n        </PaginationItem>\r\n\r\n        {pageNumbers.map((page, index) => {\r\n          if (page === \"leftEllipsis\" || page === \"rightEllipsis\") {\r\n            return (\r\n              <PaginationItem key={`ellipsis-${index}`}>\r\n                <motion.div\r\n                  initial=\"initial\"\r\n                  animate=\"animate\"\r\n                  exit=\"exit\"\r\n                  variants={itemVariants}\r\n                  transition={{ duration: 0.3, delay: index * 0.05 }}\r\n                >\r\n                  <PaginationEllipsis />\r\n                </motion.div>\r\n              </PaginationItem>\r\n            );\r\n          }\r\n\r\n          const pageNum = page as number;\r\n          const isActive = pageNum === currentPage;\r\n\r\n          return (\r\n            <PaginationItem key={pageNum}>\r\n              <motion.div\r\n                initial=\"initial\"\r\n                animate=\"animate\"\r\n                exit=\"exit\"\r\n                whileHover=\"hover\"\r\n                variants={itemVariants}\r\n                transition={{ duration: 0.3, delay: index * 0.05 }}\r\n              >\r\n                <PaginationLink\r\n                  href=\"#\"\r\n                  isActive={isActive}\r\n                  onClick={(e) => {\r\n                    e.preventDefault();\r\n                    handlePageChange(pageNum);\r\n                  }}\r\n                  className={cn(\r\n                    getButtonStyle(isActive),\r\n                    variant === \"outline\" && \"border\",\r\n                    \"transition-all duration-200\",\r\n                  )}\r\n                >\r\n                  {pageNum}\r\n                </PaginationLink>\r\n              </motion.div>\r\n            </PaginationItem>\r\n          );\r\n        })}\r\n\r\n        <PaginationItem>\r\n          <motion.div\r\n            initial=\"initial\"\r\n            animate=\"animate\"\r\n            exit=\"exit\"\r\n            whileHover=\"hover\"\r\n            variants={itemVariants}\r\n            transition={{ duration: 0.3 }}\r\n          >\r\n            <PaginationNext\r\n              href=\"#\"\r\n              onClick={(e) => {\r\n                e.preventDefault();\r\n                if (currentPage < totalPages) {\r\n                  handlePageChange(currentPage + 1);\r\n                }\r\n              }}\r\n              className={cn(\r\n                currentPage >= totalPages\r\n                  ? \"pointer-events-none opacity-50\"\r\n                  : \"\",\r\n                variant === \"rounded\" ? \"rounded-full\" : \"\",\r\n              )}\r\n            />\r\n          </motion.div>\r\n        </PaginationItem>\r\n      </PaginationContent>\r\n    </Pagination>\r\n  );\r\n\r\n  // If showDemo is true, render the demo with all variants\r\n  if (showDemo) {\r\n    // Sample data for pagination demo\r\n    const demoItems = [\r\n      {\r\n        id: 1,\r\n        title: \"Getting Started with MVPBlocks\",\r\n        category: \"Tutorial\",\r\n        date: \"Jan 15, 2023\",\r\n      },\r\n      {\r\n        id: 2,\r\n        title: \"Building Responsive UIs\",\r\n        category: \"Design\",\r\n        date: \"Feb 3, 2023\",\r\n      },\r\n      {\r\n        id: 3,\r\n        title: \"Advanced Animation Techniques\",\r\n        category: \"Animation\",\r\n        date: \"Mar 12, 2023\",\r\n      },\r\n      {\r\n        id: 4,\r\n        title: \"State Management Patterns\",\r\n        category: \"Development\",\r\n        date: \"Apr 5, 2023\",\r\n      },\r\n      {\r\n        id: 5,\r\n        title: \"Optimizing Performance\",\r\n        category: \"Performance\",\r\n        date: \"May 20, 2023\",\r\n      },\r\n      {\r\n        id: 6,\r\n        title: \"Accessibility Best Practices\",\r\n        category: \"Accessibility\",\r\n        date: \"Jun 8, 2023\",\r\n      },\r\n      {\r\n        id: 7,\r\n        title: \"Component Composition\",\r\n        category: \"Architecture\",\r\n        date: \"Jul 17, 2023\",\r\n      },\r\n      {\r\n        id: 8,\r\n        title: \"Testing Strategies\",\r\n        category: \"Testing\",\r\n        date: \"Aug 22, 2023\",\r\n      },\r\n      {\r\n        id: 9,\r\n        title: \"Deployment Workflows\",\r\n        category: \"DevOps\",\r\n        date: \"Sep 14, 2023\",\r\n      },\r\n      {\r\n        id: 10,\r\n        title: \"Theme Customization\",\r\n        category: \"Design\",\r\n        date: \"Oct 30, 2023\",\r\n      },\r\n      {\r\n        id: 11,\r\n        title: \"API Integration Patterns\",\r\n        category: \"Development\",\r\n        date: \"Nov 11, 2023\",\r\n      },\r\n      {\r\n        id: 12,\r\n        title: \"Building Design Systems\",\r\n        category: \"Design\",\r\n        date: \"Dec 5, 2023\",\r\n      },\r\n      {\r\n        id: 13,\r\n        title: \"Mobile-First Approach\",\r\n        category: \"Design\",\r\n        date: \"Jan 19, 2024\",\r\n      },\r\n      {\r\n        id: 14,\r\n        title: \"Server-Side Rendering\",\r\n        category: \"Performance\",\r\n        date: \"Feb 8, 2024\",\r\n      },\r\n      {\r\n        id: 15,\r\n        title: \"Authentication Flows\",\r\n        category: \"Security\",\r\n        date: \"Mar 22, 2024\",\r\n      },\r\n    ];\r\n\r\n    // Items per page\r\n    const itemsPerPage = 3;\r\n\r\n    // Enhanced pagination component with content\r\n    const EnhancedPagination = ({\r\n      variant = \"default\",\r\n    }: {\r\n      variant?: \"default\" | \"outline\" | \"rounded\";\r\n    }) => {\r\n      const [page, setPage] = useState(1);\r\n\r\n      // Calculate total pages\r\n      const totalPages = Math.ceil(demoItems.length / itemsPerPage);\r\n\r\n      // Get current items\r\n      const startIndex = (page - 1) * itemsPerPage;\r\n      const currentItems = demoItems.slice(\r\n        startIndex,\r\n        startIndex + itemsPerPage,\r\n      );\r\n\r\n      return (\r\n        <div className=\"space-y-6\">\r\n          {/* Content area */}\r\n          <motion.div\r\n            className=\"rounded-md border bg-card/50 p-4\"\r\n            initial={{ opacity: 0 }}\r\n            animate={{ opacity: 1 }}\r\n            key={`page-${page}`} // Key changes force re-animation\r\n            transition={{ duration: 0.3 }}\r\n          >\r\n            <div className=\"mb-4 flex items-center justify-between border-b pb-2\">\r\n              <h4 className=\"text-sm font-medium text-muted-foreground\">\r\n                Showing {startIndex + 1}-\r\n                {Math.min(startIndex + itemsPerPage, demoItems.length)} of{\" \"}\r\n                {demoItems.length} items\r\n              </h4>\r\n              <span className=\"rounded-full bg-primary/10 px-2 py-1 text-xs font-medium text-primary\">\r\n                Page {page} of {totalPages}\r\n              </span>\r\n            </div>\r\n\r\n            <div className=\"space-y-4\">\r\n              {currentItems.map((item) => (\r\n                <motion.div\r\n                  key={item.id}\r\n                  initial={{ opacity: 0, y: 10 }}\r\n                  animate={{ opacity: 1, y: 0 }}\r\n                  transition={{\r\n                    duration: 0.3,\r\n                    delay: (item.id % itemsPerPage) * 0.1,\r\n                  }}\r\n                  className=\"flex items-center justify-between rounded-md border p-3 hover:bg-muted/50\"\r\n                >\r\n                  <div>\r\n                    <h3 className=\"font-medium\">{item.title}</h3>\r\n                    <div className=\"flex items-center gap-2 text-sm text-muted-foreground\">\r\n                      <span className=\"rounded-full bg-primary/10 px-2 py-0.5 text-xs font-medium text-primary\">\r\n                        {item.category}\r\n                      </span>\r\n                      <span>{item.date}</span>\r\n                    </div>\r\n                  </div>\r\n                  <button className=\"rounded-full p-2 hover:bg-muted\">\r\n                    <ChevronRight className=\"h-4 w-4 text-muted-foreground\" />\r\n                  </button>\r\n                </motion.div>\r\n              ))}\r\n            </div>\r\n          </motion.div>\r\n\r\n          {/* Pagination controls */}\r\n          <Pagination className=\"py-2\">\r\n            <PaginationContent>\r\n              <PaginationItem>\r\n                <motion.div\r\n                  initial=\"initial\"\r\n                  animate=\"animate\"\r\n                  exit=\"exit\"\r\n                  whileHover=\"hover\"\r\n                  variants={itemVariants}\r\n                  transition={{ duration: 0.3 }}\r\n                >\r\n                  <PaginationPrevious\r\n                    href=\"#\"\r\n                    onClick={(e) => {\r\n                      e.preventDefault();\r\n                      if (page > 1) setPage(page - 1);\r\n                    }}\r\n                    className={cn(\r\n                      page <= 1 ? \"pointer-events-none opacity-50\" : \"\",\r\n                      variant === \"rounded\" ? \"rounded-full\" : \"\",\r\n                    )}\r\n                  />\r\n                </motion.div>\r\n              </PaginationItem>\r\n\r\n              {Array.from({ length: totalPages }).map((_, i) => {\r\n                const pageNum = i + 1;\r\n                const isActive = pageNum === page;\r\n\r\n                // Show ellipsis for many pages\r\n                if (totalPages > 5) {\r\n                  // Always show first and last page\r\n                  if (pageNum === 1 || pageNum === totalPages) {\r\n                    return (\r\n                      <PaginationItem key={pageNum}>\r\n                        <motion.div\r\n                          initial=\"initial\"\r\n                          animate=\"animate\"\r\n                          exit=\"exit\"\r\n                          whileHover=\"hover\"\r\n                          variants={itemVariants}\r\n                          transition={{ duration: 0.3 }}\r\n                        >\r\n                          <PaginationLink\r\n                            href=\"#\"\r\n                            isActive={isActive}\r\n                            onClick={(e) => {\r\n                              e.preventDefault();\r\n                              setPage(pageNum);\r\n                            }}\r\n                            className={cn(\r\n                              getButtonStyle(isActive),\r\n                              variant === \"outline\" && \"border\",\r\n                              \"transition-all duration-200\",\r\n                            )}\r\n                          >\r\n                            {pageNum}\r\n                          </PaginationLink>\r\n                        </motion.div>\r\n                      </PaginationItem>\r\n                    );\r\n                  }\r\n\r\n                  // Show current page and adjacent pages\r\n                  if (\r\n                    pageNum === page ||\r\n                    pageNum === page - 1 ||\r\n                    pageNum === page + 1\r\n                  ) {\r\n                    return (\r\n                      <PaginationItem key={pageNum}>\r\n                        <motion.div\r\n                          initial=\"initial\"\r\n                          animate=\"animate\"\r\n                          exit=\"exit\"\r\n                          whileHover=\"hover\"\r\n                          variants={itemVariants}\r\n                          transition={{ duration: 0.3 }}\r\n                        >\r\n                          <PaginationLink\r\n                            href=\"#\"\r\n                            isActive={isActive}\r\n                            onClick={(e) => {\r\n                              e.preventDefault();\r\n                              setPage(pageNum);\r\n                            }}\r\n                            className={cn(\r\n                              getButtonStyle(isActive),\r\n                              variant === \"outline\" && \"border\",\r\n                              \"transition-all duration-200\",\r\n                            )}\r\n                          >\r\n                            {pageNum}\r\n                          </PaginationLink>\r\n                        </motion.div>\r\n                      </PaginationItem>\r\n                    );\r\n                  }\r\n\r\n                  // Show ellipsis\r\n                  if (\r\n                    (pageNum === 2 && page > 3) ||\r\n                    (pageNum === totalPages - 1 && page < totalPages - 2)\r\n                  ) {\r\n                    return (\r\n                      <PaginationItem key={`ellipsis-${pageNum}`}>\r\n                        <motion.div\r\n                          initial=\"initial\"\r\n                          animate=\"animate\"\r\n                          exit=\"exit\"\r\n                          variants={itemVariants}\r\n                          transition={{ duration: 0.3 }}\r\n                        >\r\n                          <PaginationEllipsis />\r\n                        </motion.div>\r\n                      </PaginationItem>\r\n                    );\r\n                  }\r\n\r\n                  return null;\r\n                }\r\n\r\n                // Show all pages if total pages <= 5\r\n                return (\r\n                  <PaginationItem key={pageNum}>\r\n                    <motion.div\r\n                      initial=\"initial\"\r\n                      animate=\"animate\"\r\n                      exit=\"exit\"\r\n                      whileHover=\"hover\"\r\n                      variants={itemVariants}\r\n                      transition={{ duration: 0.3 }}\r\n                    >\r\n                      <PaginationLink\r\n                        href=\"#\"\r\n                        isActive={isActive}\r\n                        onClick={(e) => {\r\n                          e.preventDefault();\r\n                          setPage(pageNum);\r\n                        }}\r\n                        className={cn(\r\n                          getButtonStyle(isActive),\r\n                          variant === \"outline\" && \"border\",\r\n                          \"transition-all duration-200\",\r\n                        )}\r\n                      >\r\n                        {pageNum}\r\n                      </PaginationLink>\r\n                    </motion.div>\r\n                  </PaginationItem>\r\n                );\r\n              })}\r\n\r\n              <PaginationItem>\r\n                <motion.div\r\n                  initial=\"initial\"\r\n                  animate=\"animate\"\r\n                  exit=\"exit\"\r\n                  whileHover=\"hover\"\r\n                  variants={itemVariants}\r\n                  transition={{ duration: 0.3 }}\r\n                >\r\n                  <PaginationNext\r\n                    href=\"#\"\r\n                    onClick={(e) => {\r\n                      e.preventDefault();\r\n                      if (page < totalPages) setPage(page + 1);\r\n                    }}\r\n                    className={cn(\r\n                      page >= totalPages\r\n                        ? \"pointer-events-none opacity-50\"\r\n                        : \"\",\r\n                      variant === \"rounded\" ? \"rounded-full\" : \"\",\r\n                    )}\r\n                  />\r\n                </motion.div>\r\n              </PaginationItem>\r\n            </PaginationContent>\r\n          </Pagination>\r\n        </div>\r\n      );\r\n    };\r\n\r\n    return (\r\n      <div className=\"mx-auto max-w-6xl px-4 py-12\">\r\n        <div className=\"mb-12 text-center\">\r\n          <h2 className=\"mb-2 text-3xl font-bold tracking-tight\">\r\n            Pagination Examples\r\n          </h2>\r\n          <p className=\"mx-auto max-w-2xl text-muted-foreground\">\r\n            Interactive pagination components that demonstrate real content\r\n            navigation. Each example shows how pagination can be used to\r\n            navigate through a collection of items.\r\n          </p>\r\n        </div>\r\n\r\n        <div className=\"space-y-16\">\r\n          {/* Default Variant */}\r\n          <motion.div\r\n            initial={{ opacity: 0, y: 20 }}\r\n            animate={{ opacity: 1, y: 0 }}\r\n            transition={{ duration: 0.5 }}\r\n            className=\"rounded-lg border bg-card p-6 shadow-sm\"\r\n          >\r\n            <h3 className=\"mb-6 text-xl font-semibold\">Default Style</h3>\r\n            <EnhancedPagination />\r\n          </motion.div>\r\n\r\n          {/* Outline Variant */}\r\n          <motion.div\r\n            initial={{ opacity: 0, y: 20 }}\r\n            animate={{ opacity: 1, y: 0 }}\r\n            transition={{ duration: 0.5, delay: 0.1 }}\r\n            className=\"rounded-lg border bg-card p-6 shadow-sm\"\r\n          >\r\n            <h3 className=\"mb-6 text-xl font-semibold\">Outline Style</h3>\r\n            <EnhancedPagination variant=\"outline\" />\r\n          </motion.div>\r\n\r\n          {/* Rounded Variant */}\r\n          <motion.div\r\n            initial={{ opacity: 0, y: 20 }}\r\n            animate={{ opacity: 1, y: 0 }}\r\n            transition={{ duration: 0.5, delay: 0.2 }}\r\n            className=\"rounded-lg border bg-card p-6 shadow-sm\"\r\n          >\r\n            <h3 className=\"mb-6 text-xl font-semibold\">Rounded Style</h3>\r\n            <EnhancedPagination variant=\"rounded\" />\r\n          </motion.div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  // Otherwise, just return the pagination component\r\n  return PaginationComponent;\r\n}\r\n",
      "path": "/components/mvpblocks/basics/pagination/basic-pagination.tsx",
      "target": "/components/mvpblocks/basic-pagination.tsx"
    }
  ]
}